{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome","text":"<p>This website provides open teaching resources for my courses and workshops. The goal is to prepare and share material that is clear, practical, and useful for engineering students and anyone interested in learning. All course content is written in Markdown and published openly to encourage reuse and self-study. If you have questions, suggestions, or feedback, feel free to contact me.</p>"},{"location":"#current-courses","title":"Current Courses","text":""},{"location":"#fh-joanneum-ws202526","title":"FH Joanneum (WS2025/26)","text":"<ul> <li>DTLE</li> <li>SDA</li> </ul>"},{"location":"#resources","title":"Resources","text":"<p>If you want to work in a Docker container with my setup installed, you can freely download it from my GitHub repository (here).</p>"},{"location":"#about-me","title":"About me","text":"<ul> <li>LinkedIn</li> <li>Github</li> <li>Coding is my passion for more than 30 years</li> <li>PhD in Computer Science, TU Graz</li> <li>Software entrepreneur</li> <li>Enthusiastic about Simplicity, Linux, terminal workflows, and neovim</li> <li>Experience with many programming languages (C/C++, Java, C#, Python, Go, Lua, \u2026)</li> <li>I enjoy making complex technical topics accessible and teaching professional developer workflows</li> </ul>"},{"location":"courses/dtle/","title":"Design Tools And Laboratory Engineering - Coding","text":"<p>Course Number M24.0862104 WS 2025/26</p>"},{"location":"courses/dtle/#welcome-to-the-course","title":"Welcome to the Course \ud83d\ude80","text":"<p>This course is an introduction to Professional Developer Tools and Workflows. It is designed for hands-on Master students in engineering disciplines:</p> <ul> <li>Embedded Systems Engineering</li> <li>Power Electronics Engineering</li> <li>System Test Engineering</li> </ul> <p>Our goal</p> <p>Get bootstraped into the world of software development with the basic toolset.</p>"},{"location":"courses/dtle/#why-this-course","title":"Why this course?","text":"<p>Modern engineering requires more than theory:</p> <ul> <li>Projects are developed in teams, not alone.</li> <li>Source code is managed, versioned, and reviewed.</li> <li>Debugging, testing, and automation are daily tasks.</li> <li>Knowing the right tools saves time and frustration.</li> </ul> <p>This course gives you the toolbox and mindset to succeed.</p>"},{"location":"courses/dtle/#examination","title":"Examination","text":"<p>Since this is an introductory course, you have two options. You can either take the qualification exam at the beginning of the course or attend the lecture as outlined below.</p> <p>The qualification exam consists of a 60-minute practical session that assesses whether you are already familiar with the course content.</p>"},{"location":"courses/dtle/#course-structure","title":"Course Structure","text":"<p>We have 10 units (2 blocks \u00d7 5 sessions). Each unit is 45 minutes of (minimal) theory, live demos, and hands-on exercises.</p>"},{"location":"courses/dtle/#block-1-environment-tools","title":"Block 1: Environment &amp; Tools","text":"<ol> <li>Virtual Machine</li> <li>Linux Basics &amp; the Terminal</li> <li>The Shell \u2013 Essential Commands</li> <li>neovim &amp; VSCode \u2013 Your Coding Environment</li> <li>tmux \u2013 Work like a Pro</li> <li>Configuration management (Git)</li> </ol>"},{"location":"courses/dtle/#block-2-cmake-googletest-c","title":"Block 2: CMake &amp; GoogleTest &amp; C++","text":"<ol> <li>CMake</li> <li>First C++ Project</li> <li>Testing</li> <li>Debugging</li> </ol>"},{"location":"courses/dtle/#what-you-will-learn","title":"What you will learn","text":"<p>By the end of this course you will:</p> <ul> <li>Navigate Linux and the terminal with confidence.</li> <li>Manage code with Git and collaborate in teams.</li> <li>Build and structure C++ projects using CMake.</li> <li>Learn how to write C++ code.</li> <li>Work with Google Test.</li> <li>Develop a small engineering project from start to finish.</li> </ul>"},{"location":"courses/dtle/#our-learning-style","title":"Our Learning Style","text":"<ul> <li>Hands-on first: you learn by doing.</li> <li>Mini-exercises in every session.</li> <li>Work in teams</li> <li>Mistakes are part of learning \u2192 we debug together.</li> <li>Focus on professional workflows you\u2019ll use in industry.</li> </ul> <p>\ud83d\udc49 Be ready to open your terminal, code, and experiment. This course is not about slides \u2014 it\u2019s about practice.</p>"},{"location":"courses/dtle/#resources","title":"Resources","text":"<ul> <li>Linux Platform (Egon Teiniker) Github</li> <li>Introduction to Configuration Management (Egon Teiniker) Github</li> <li>Introduction to C++ (Egon Teiniker) Github</li> </ul>"},{"location":"courses/dtle/block_1/","title":"Block 1: Environment &amp; Tools","text":"<ul> <li>Welcome &amp; Virtual Machine (slides)</li> <li>Linux Basics &amp; the Terminal (slides)</li> <li>Linux Tools (slides)</li> <li>Git Basics (slides)</li> <li>Git Advanced (slides)</li> </ul>"},{"location":"courses/dtle/block_2/","title":"C++, Testing, Debugging","text":"<ul> <li>First C++ Project (slides)</li> <li>Testing w/ Google Test (slides)</li> <li>Classes (slides)</li> <li>STL (slides)</li> <li>Debugging (slides)</li> </ul>"},{"location":"courses/dtle/block_2/#homework","title":"Homework","text":"<p>Clone the repository from:</p> <pre><code>git clone https://github.com/breiting/dtle-2025\n</code></pre> <p>Read the <code>README.md</code> file for further instructions.</p>"},{"location":"courses/dtle/slides/00_welcome/","title":"Design Tools And Laboratory Engineering - Linux and C++","text":"<pre><code>##      ## ######## ##        ######   #######  ##     ## ########\n##  ##  ## ##       ##       ##    ## ##     ## ###   ### ##\n##  ##  ## ##       ##       ##       ##     ## #### #### ##\n##  ##  ## ######   ##       ##       ##     ## ## ### ## ######\n##  ##  ## ##       ##       ##       ##     ## ##     ## ##\n##  ##  ## ##       ##       ##    ## ##     ## ##     ## ##\n ###  ###  ######## ########  ######   #######  ##     ## ########\n</code></pre>"},{"location":"courses/dtle/slides/00_welcome/#about-me","title":"ABOUT ME","text":"<ul> <li>\ud83d\udcbb Coding is my passion \u2192 30+ years of experience</li> <li>\ud83c\udf93 PhD in Computer Science (TU Graz)</li> <li>\ud83d\ude80 Software entrepreneur</li> <li>\ud83d\udda5\ufe0f\\ Terminal &amp; neovim enthusiast \u2014 I value simplicity</li> <li>\ud83c\udf0d Explored many languages</li> <li>Pascal, Oberon, C/C++, Java/Groovy, C#, JavaScript, Shell, Python, Go, Lua</li> </ul> <p>\ud83c\udfaf My mission</p> <p>Help you get started with professional tools &amp; workflows</p> <p></p>"},{"location":"courses/dtle/slides/00_welcome/#course-goals-expected-outcomes","title":"COURSE GOALS &amp; EXPECTED OUTCOMES","text":"<p>[!tip] GOAL Each student can develop, test, and share a small C++ project in a Linux environment</p>"},{"location":"courses/dtle/slides/00_welcome/#in-detail","title":"IN DETAIL","text":"<ul> <li>Getting started with: Linux, Terminal, Shell, Git, C++17, CMake, Testing, Debugging</li> <li>Navigate Linux confidently</li> <li>Manage code with Git &amp; branches</li> <li>Edit, compile, and debug C++ projects</li> <li>Apply to engineering domains</li> </ul> <p>MY COURSE MATERIAL (Slides)</p> <p>https://teaching.reitinger.eu</p>"},{"location":"courses/dtle/slides/00_welcome/#course-style-learning-approach","title":"COURSE STYLE &amp; LEARNING APPROACH","text":"<ul> <li>Hands-on first \u2192 minimal slides, maximum coding</li> <li>Mini-exercises</li> <li>Practice Practice Practice</li> <li>Start small \u2192 grow into a working project</li> <li>Collaboration &amp; best practices</li> <li>Use Git like a pro</li> <li>Debug, test, and document code</li> </ul>"},{"location":"courses/dtle/slides/00_welcome/#course-grading","title":"COURSE GRADING","text":""},{"location":"courses/dtle/slides/00_welcome/#grading-policy-10-points","title":"Grading Policy (10 points)","text":"<ul> <li>Attendance: 5 points</li> <li>Full attendance = grade 4 (minimum passing grade)</li> <li>Assignment: 5 points</li> <li>Opportunity to improve to grade 3, 2, or 1</li> </ul>"},{"location":"courses/dtle/slides/00_welcome/#assignment-grading-criteria","title":"Assignment Grading Criteria","text":"<ul> <li>Build w/o errors (1 point)</li> <li> <p>Project compiles with CMake</p> </li> <li> <p>Passing unit tests (2 point)</p> </li> <li> <p>All unit tests are passing</p> </li> <li> <p>Quality &amp; Documentation (1 point)</p> </li> <li> <p>Clean project structure</p> </li> <li> <p>Git Workflow (1 point)</p> </li> <li>Multiple meaningful commits</li> <li>Commit messages are descriptive</li> </ul>"},{"location":"courses/dtle/slides/00_welcome/#final-grades","title":"Final Grades","text":"<ul> <li>Grade 1 (Excellent): 10 points</li> <li>Grade 2 (Good): 8 or 9 points</li> <li>Grade 3 (Satisfactory): 6 or 7 points</li> <li>Grade 4 (Pass): 5 points (attendance only)</li> </ul>"},{"location":"courses/dtle/slides/00_welcome/#final-project","title":"FINAL PROJECT","text":""},{"location":"courses/dtle/slides/00_welcome/#idea","title":"Idea","text":"<ul> <li>Integrates all skills: Linux, Git, C++, CMake, Documentation</li> <li>You will build a mini C++ project from scratch</li> <li>Final hand-in till October 24th, 2025</li> </ul>"},{"location":"courses/dtle/slides/00_welcome/#why-a-project","title":"Why a Project?","text":"<ul> <li>Learning by doing</li> <li>Simulates a professional workflow</li> <li>Demonstrates mastery of tools and concepts</li> </ul>"},{"location":"courses/dtle/slides/00_welcome/#questions","title":"Questions?","text":""},{"location":"courses/dtle/slides/01_linux_shell/","title":"Unit 1","text":""},{"location":"courses/dtle/slides/01_linux_shell/#agenda","title":"AGENDA","text":"<ul> <li>Why Linux?</li> <li>VirtualBox &amp; VM login</li> <li>Linux filesystem basics</li> <li>The Terminal and the Shell</li> <li>First shell commands</li> <li>Mini exercises</li> </ul>"},{"location":"courses/dtle/slides/01_linux_shell/#why-linux","title":"Why Linux?","text":"<ul> <li>Linux is widely used (server, super-computer, embedded)</li> <li>Open source, stable, flexible</li> <li>Good development ecosystem</li> <li>Essential for professional software workflows</li> <li>Most engineering tools run best on Linux</li> <li>The Shell = your universal remote for the computer</li> <li>The Terminal = efficiency, automation, reproducibility</li> <li>Professional developers live in the terminal</li> <li>Editing, compiling, debugging \u2192 all faster</li> </ul>"},{"location":"courses/dtle/slides/01_linux_shell/#virtualbox-vm","title":"VirtualBox &amp; VM","text":"<ul> <li>Start VirtualBox VM</li> <li>Login with provided credentials (<code>student</code>/<code>student</code>)</li> <li>Open a terminal window</li> </ul>"},{"location":"courses/dtle/slides/01_linux_shell/#linux-filesystem-basics","title":"Linux Filesystem Basics","text":"<ul> <li>Hierarchy structure:</li> <li><code>/</code> root</li> <li><code>/home</code> user data</li> <li><code>/etc</code> configuration</li> <li><code>/usr</code> system applications</li> </ul>"},{"location":"courses/dtle/slides/01_linux_shell/#the-terminal-the-shell","title":"The Terminal &amp; The Shell","text":"<ul> <li>Terminal: program to access the shell</li> <li>Shell: command interpreter (<code>bash</code>, <code>zsh</code>, ...)</li> <li>You communicate with the OS via text commands</li> </ul>"},{"location":"courses/dtle/slides/01_linux_shell/#first-shell-commands","title":"First Shell Commands","text":"<pre><code>pwd        # print working directory\nls -l      # list files with details\ncd dir     # change to directory\ncd ..      # go one directory up\nmkdir test # create new directory\nrm -r test # remove directory recursively (be aware!)\n</code></pre>"},{"location":"courses/dtle/slides/01_linux_shell/#more-shell-commands","title":"More Shell Commands","text":"<pre><code>cp file1 file2   # copy file\nmv file1 file2   # move/rename file\ncat file.txt     # show file contents\nless file.txt    # view file with navigation\nhead file.txt    # first lines\ntail file.txt    # last lines\nman ls           # manual for ls command\n</code></pre>"},{"location":"courses/dtle/slides/01_linux_shell/#mini-exercises","title":"Mini-Exercises","text":""},{"location":"courses/dtle/slides/01_linux_shell/#exercise-1","title":"Exercise 1","text":"<ol> <li>Create a directory called <code>myproject</code></li> <li>Inside <code>myproject</code>, create a file <code>notes.txt</code> with:</li> </ol> <pre><code>   echo \"Hello Linux\" &gt; notes.txt\n</code></pre> <ol> <li>Display its content with <code>cat</code></li> </ol>"},{"location":"courses/dtle/slides/01_linux_shell/#exercise-2","title":"Exercise 2","text":"<ol> <li>Append more text into <code>notes.txt</code>:</li> </ol> <pre><code>   echo \"More notes\" &gt;&gt; notes.txt\n</code></pre> <ol> <li>Use <code>tail</code> to show only the last line</li> <li>Delete <code>notes.txt</code> and recreate it with new content</li> </ol>"},{"location":"courses/dtle/slides/01_linux_shell/#survival-package-linux-basics","title":"Survival Package (Linux Basics)","text":"<ul> <li>Navigation: <code>pwd</code>, <code>ls</code>, <code>cd</code></li> <li>File handling: <code>cp</code>, <code>mv</code>, <code>mkdir</code>, <code>rm</code></li> <li>Viewing: <code>cat</code>, <code>head</code>, <code>tail</code></li> <li>Documentation: <code>man</code></li> </ul>"},{"location":"courses/dtle/slides/01_linux_shell/#wrap-up","title":"Wrap-Up","text":"<ul> <li>Started VM and terminal</li> <li>Learned Linux filesystem structure</li> <li>Practiced essential shell commands</li> <li>Hands-on exercises with files and directories</li> </ul>"},{"location":"courses/dtle/slides/01_linux_shell/#next-session","title":"Next Session","text":"<ul> <li>Pipes and redirects</li> <li>Essential tools: <code>grep</code>, <code>find</code>, <code>sed</code></li> <li>New kids on the block: <code>rg</code>, <code>fd</code></li> <li><code>tmux</code> and <code>neovim</code> basics</li> </ul>"},{"location":"courses/dtle/slides/01_linux_shell/#questions","title":"Questions?","text":""},{"location":"courses/dtle/slides/02_tools/","title":"Unit 2","text":""},{"location":"courses/dtle/slides/02_tools/#agenda","title":"AGENDA","text":"<ul> <li>Installing programs</li> <li>Streams, Pipes &amp; Redirects</li> <li>Essential tools: <code>grep</code>, <code>find</code>, <code>sed</code></li> <li><code>tmux</code> basics</li> <li><code>neovim</code> introduction</li> <li>Mini exercises</li> <li>New kids on the block: <code>rg</code>, <code>fd</code></li> </ul>"},{"location":"courses/dtle/slides/02_tools/#installing-programs","title":"Installing programs","text":"<ul> <li>Requires super-user permissions</li> <li>Either use <code>su</code> or <code>sudo</code></li> <li>Password for super-user: <code>root66</code></li> </ul> <pre><code>sudo su                ... get super-user shell (student password)\napt-get update         ... updates the package list\napt-get install &lt;name&gt; ... installs a package\n</code></pre>"},{"location":"courses/dtle/slides/02_tools/#streams-in-linux","title":"Streams in Linux","text":"<p>Everything is a file/stream under Linux.</p> <ul> <li>stdin (0) \u2192 input (keyboard)</li> <li>stdout (1) \u2192 normal output (terminal)</li> <li>stderr (2) \u2192 error output (terminal)</li> <li>Redirection:</li> </ul> <pre><code>command &gt; file   # stdout to file (overwrite)\ncommand &gt;&gt; file  # append stdout to file\ncommand &lt; file   # use file as input\n</code></pre> <p>Default: <code>ls</code> prints the directory listing to <code>stdout</code> by default!</p>"},{"location":"courses/dtle/slides/02_tools/#pipes","title":"Pipes","text":"<p>Streams can be forwarded to other programs. <code>stdout</code> gets <code>stdin</code> for the other</p> <ul> <li>Combine commands using <code>|</code></li> </ul> <pre><code>ls -l | grep \".cpp\"\nps aux | grep firefox\n</code></pre>"},{"location":"courses/dtle/slides/02_tools/#mini-exercises","title":"Mini-Exercises","text":"<pre><code>cat                ... without arguments (what happens?)\ncat &gt; test.txt     ... use Control-D\nls /notfound &gt; out.txt 2&gt; err.txt\n</code></pre>"},{"location":"courses/dtle/slides/02_tools/#tool-grep","title":"Tool: grep","text":"<ul> <li>Search for text patterns in files</li> </ul> <pre><code>grep main \"*.cpp\"\ngrep -i \"error\" /var/log/syslog\n</code></pre>"},{"location":"courses/dtle/slides/02_tools/#tool-find","title":"Tool: find","text":"<ul> <li>Search for files by name, type, size</li> </ul> <pre><code>find . -name \"*.cpp\"\nfind /etc -type f -size +1M\n</code></pre>"},{"location":"courses/dtle/slides/02_tools/#tool-sed","title":"Tool: sed","text":"<ul> <li>Stream editor for search/replace</li> </ul> <pre><code>sed 's/foo/bar/g' file.txt\n</code></pre>"},{"location":"courses/dtle/slides/02_tools/#mini-exercises_1","title":"Mini-Exercises","text":""},{"location":"courses/dtle/slides/02_tools/#exercise-1","title":"Exercise 1","text":"<ul> <li>Redirect the output of <code>ls -l</code> into a file called <code>listing.txt</code></li> <li>Append a second listing to the same file</li> <li>Use <code>grep</code> to search for <code>.txt</code> entries</li> </ul>"},{"location":"courses/dtle/slides/02_tools/#mini-exercise-2","title":"Mini-Exercise 2","text":"<ul> <li>Use <code>find</code> to locate all <code>.log</code> files in <code>/var/log</code></li> <li>Replace the word \"TODO\" with \"DONE\" in a test file using <code>sed</code></li> </ul>"},{"location":"courses/dtle/slides/02_tools/#tmux-basics","title":"tmux Basics","text":"<ul> <li>Terminal multiplexer</li> <li>Keep sessions running in background</li> <li><code>tmux detach</code></li> <li>Key bindings (default prefix: <code>Ctrl-b</code>):</li> <li><code>%</code> split vertically</li> <li><code>\"</code> split horizontally</li> <li><code>o</code> switch pane</li> <li><code>d</code> detach session</li> <li>Reattach: <code>tmux attach</code></li> </ul>"},{"location":"courses/dtle/slides/02_tools/#neovim-introduction","title":"neovim Introduction","text":"<ul> <li>Modal editor (Normal, Insert, Command modes)</li> <li>Basic commands:</li> <li><code>i</code> \u2192 insert mode</li> <li><code>Esc</code> \u2192 back to normal mode</li> <li><code>:wq</code> \u2192 save and quit</li> <li><code>/pattern</code> \u2192 search</li> <li><code>dd</code> delete line</li> <li><code>yy</code> yank (copy), <code>p</code> paste</li> <li><code>u</code> undo</li> </ul>"},{"location":"courses/dtle/slides/02_tools/#mini-exercises_2","title":"Mini-Exercises","text":""},{"location":"courses/dtle/slides/02_tools/#exercise-3","title":"Exercise 3","text":"<ol> <li>Open a tmux session</li> <li>Split the screen into two panes</li> <li>In the left pane, open a file with <code>nvim</code></li> <li>In the right pane, run <code>ls -l</code> and <code>grep</code></li> </ol>"},{"location":"courses/dtle/slides/02_tools/#other-shell-commands","title":"Other Shell Commands","text":"<pre><code>export     # sets an environment variable\necho $PATH # print an environment variable\n./&lt;cmd&gt;    # executes an application in the current dir\nchmod      # change file attributes\n</code></pre>"},{"location":"courses/dtle/slides/02_tools/#new-kids-on-the-block","title":"New kids on the block","text":""},{"location":"courses/dtle/slides/02_tools/#ripgrep","title":"<code>ripgrep</code>","text":"<p>ripgrep recursively searches directories for a regex pattern while respecting your gitignore. A fast replacement for <code>grep</code>.</p> <p><code>apt-get install ripgrep</code></p>"},{"location":"courses/dtle/slides/02_tools/#fdfind","title":"<code>fdfind</code>","text":"<p>A simple, fast and user-friendly alternative to <code>find</code></p> <p><code>apt-get install fd-find</code></p>"},{"location":"courses/dtle/slides/02_tools/#survival-package-tools-workflow","title":"Survival Package (Tools &amp; Workflow)","text":"<ul> <li>Pipes and redirection: <code>|</code>, <code>&gt;</code>, <code>&gt;&gt;</code></li> <li><code>grep</code> or <code>ripgrep</code>, <code>find</code> or <code>fdfind</code>, <code>sed</code></li> <li><code>tmux</code>: sessions, splits, detach/attach</li> <li><code>neovim</code>: insert, save, quit, navigation, search, undo</li> </ul>"},{"location":"courses/dtle/slides/02_tools/#wrap-up","title":"Wrap-Up","text":"<ul> <li>Learned how to combine commands with pipes</li> <li>Practiced essential search &amp; replace tools</li> <li>Worked with tmux splits</li> <li>Got comfortable editing in neovim</li> </ul>"},{"location":"courses/dtle/slides/02_tools/#resources","title":"Resources","text":"<p>Teiniker Github</p>"},{"location":"courses/dtle/slides/02_tools/#next-session","title":"Next Session","text":"<ul> <li>Configuration management</li> <li>Git basics</li> </ul>"},{"location":"courses/dtle/slides/03_git/","title":"Unit 3","text":""},{"location":"courses/dtle/slides/03_git/#agenda","title":"AGENDA","text":"<ul> <li>What is Git?</li> <li>History and motivation</li> <li>Key concepts: repo, commit, branch, remote</li> <li>First Git commands</li> <li>Working with remotes (GitHub/GitLab)</li> <li>Mini exercises</li> </ul>"},{"location":"courses/dtle/slides/03_git/#what-is-git","title":"What is Git?","text":"<ul> <li>A distributed version control system (VCS)</li> <li>Tracks changes in files (mostly source code)</li> <li>Allows collaboration, history, and backups</li> <li>Invented by Linus Torvalds in 2005 for Linux kernel</li> <li>The name? British slang for \"unpleasant person\" \u2013 Linus being ironic</li> </ul>"},{"location":"courses/dtle/slides/03_git/#why-git","title":"Why Git?","text":"<ul> <li>No more \"final_v2_neu.cpp\"</li> <li>History of every change</li> <li>Work in parallel on different features</li> <li>Collaboration across teams</li> <li>Safe backups</li> </ul>"},{"location":"courses/dtle/slides/03_git/#git-concepts","title":"Git Concepts","text":"<ul> <li>Repository (repo): project folder + .git directory</li> <li>Commit: snapshot of changes</li> <li>Branch: parallel line of development</li> <li>Remote: server version (GitHub, GitLab)</li> <li>Clone: copy remote repo locally</li> </ul>"},{"location":"courses/dtle/slides/03_git/#prerequisites","title":"Prerequisites","text":"<pre><code>git config --global user.name \"Charlie Smith\"\ngit config --global user.email \"charlie.smith@powerplant.com\"\n</code></pre>"},{"location":"courses/dtle/slides/03_git/#create-a-new-repo","title":"Create a New Repo","text":"<p>Make sure to have a new empty folder (directory).</p> <pre><code>git init\ngit status\necho \"Hello Git\" &gt; README.md\ngit add README.md\ngit commit -m \"Initial commit\"\n</code></pre>"},{"location":"courses/dtle/slides/03_git/#tracking-changes","title":"Tracking Changes","text":"<pre><code>git status         # show modified files\ngit diff           # show changes\ngit add file.cpp   # stage changes\ngit commit -m \"Describe your change\"\n</code></pre>"},{"location":"courses/dtle/slides/03_git/#working-with-remotes","title":"Working with Remotes","text":"<ul> <li>Connect local repo to a server (GitHub/GitLab)</li> </ul> <pre><code>git remote add origin &lt;url&gt;\ngit push -u origin main\ngit pull origin main\ngit clone &lt;url&gt;\n</code></pre>"},{"location":"courses/dtle/slides/03_git/#gitignore","title":".gitignore","text":"<ul> <li>Tell Git which files NOT to track   Example <code>.gitignore</code>:</li> </ul> <pre><code>*.o\n*.log\nbuild/\n</code></pre>"},{"location":"courses/dtle/slides/03_git/#viewing-history","title":"Viewing History","text":"<pre><code>git log\ngit log --oneline --graph\n</code></pre>"},{"location":"courses/dtle/slides/03_git/#mini-exercises","title":"Mini-Exercises","text":""},{"location":"courses/dtle/slides/03_git/#exercise-1","title":"Exercise 1","text":"<ol> <li>Create a new folder and initialize a Git repo</li> <li>Add a file <code>hello.txt</code> and commit it</li> <li>Edit <code>hello.txt</code> and commit the change</li> <li>Inspect history with <code>git log</code></li> </ol>"},{"location":"courses/dtle/slides/03_git/#exercise-2","title":"Exercise 2","text":"<ol> <li>Clone an existing repository from Github</li> </ol> <pre><code>git clone https://github.com/breiting/dtle-2025\n</code></pre>"},{"location":"courses/dtle/slides/03_git/#exercise-3-requires-a-github-account","title":"Exercise 3 (requires a Github account)","text":"<ol> <li>Create a new repo on GitHub</li> <li>Link your local repo with remote (<code>git remote add origin ...</code>)</li> <li>Push your commits to GitHub</li> <li>Clone the repo into a new directory to verify</li> </ol>"},{"location":"courses/dtle/slides/03_git/#survival-package-git-basics","title":"Survival Package (Git Basics)","text":"<ul> <li><code>git init</code></li> <li><code>git status</code></li> <li><code>git add</code></li> <li><code>git commit -m</code></li> <li><code>git log</code></li> <li><code>git diff</code></li> <li><code>git remote add origin</code></li> <li><code>git push</code></li> <li><code>git pull</code></li> <li><code>git clone</code></li> <li>Don't forget to add a <code>.gitignore</code> file</li> </ul>"},{"location":"courses/dtle/slides/03_git/#wrap-up","title":"Wrap-Up","text":"<ul> <li>Learned what Git is and why it matters</li> <li>Created first local repo</li> <li>Connected to a remote repo</li> <li>Practiced committing and pushing</li> </ul>"},{"location":"courses/dtle/slides/03_git/#resources","title":"Resources","text":"<p>Teiniker Github</p>"},{"location":"courses/dtle/slides/03_git/#next-session","title":"Next Session","text":"<ul> <li>Advanced Git: branching, merging, conflicts</li> <li>Stash and blame</li> </ul>"},{"location":"courses/dtle/slides/04_git_advanced/","title":"Unit 4","text":""},{"location":"courses/dtle/slides/04_git_advanced/#agenda","title":"AGENDA","text":"<ul> <li>Branching</li> <li>Merging</li> <li>Handling conflicts</li> <li>Stash</li> <li>Log visualization</li> <li>Blame</li> <li>Mini exercises</li> </ul>"},{"location":"courses/dtle/slides/04_git_advanced/#branching","title":"Branching","text":"<ul> <li>Branch = parallel line of development</li> <li>Default branch is usually <code>main</code></li> </ul> <pre><code>git branch feature\ngit switch feature\n</code></pre>"},{"location":"courses/dtle/slides/04_git_advanced/#working-in-a-branch","title":"Working in a Branch","text":"<pre><code>echo \"new feature\" &gt; feature.txt\ngit add feature.txt\ngit commit -m \"Add feature file\"\ngit switch main\n</code></pre>"},{"location":"courses/dtle/slides/04_git_advanced/#merging","title":"Merging","text":"<ul> <li>Bring changes from another branch into current one</li> </ul> <pre><code>git merge feature\n</code></pre>"},{"location":"courses/dtle/slides/04_git_advanced/#merge-conflicts","title":"Merge Conflicts","text":"<ul> <li>Happen when two branches modify the same line</li> <li>Git marks conflicts in files:</li> </ul> <pre><code>&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD\nline from main\n=======\nline from feature\n&gt;&gt;&gt;&gt;&gt;&gt;&gt; feature\n</code></pre> <ul> <li>Resolve manually, then:</li> </ul> <pre><code>git add conflicted_file.cpp\ngit commit\n</code></pre>"},{"location":"courses/dtle/slides/04_git_advanced/#log-visualization","title":"Log Visualization","text":"<pre><code>git log --oneline --graph --all\n</code></pre>"},{"location":"courses/dtle/slides/04_git_advanced/#stash","title":"Stash","text":"<ul> <li>Save unfinished changes temporarily</li> </ul> <pre><code>git stash          # save changes\ngit pull           # update repo\ngit stash pop      # reapply changes\n</code></pre>"},{"location":"courses/dtle/slides/04_git_advanced/#blame","title":"Blame","text":"<ul> <li>Show who last modified each line in a file</li> </ul> <pre><code>git blame file.cpp\n</code></pre>"},{"location":"courses/dtle/slides/04_git_advanced/#mini-exercises","title":"Mini-Exercises","text":""},{"location":"courses/dtle/slides/04_git_advanced/#exercise-1","title":"Exercise 1","text":"<ol> <li>Create a new branch <code>experiment</code></li> <li>Add and commit a new file</li> <li>Switch back to <code>main</code> and merge <code>experiment</code></li> </ol>"},{"location":"courses/dtle/slides/04_git_advanced/#exercise-2-merge","title":"Exercise 2 (Merge)","text":"<ol> <li>Make a new branch <code>b1</code></li> <li>Commit change</li> <li>Go back to <code>main</code> and make another branch <code>b2</code></li> <li>Commit change</li> <li>Switch back to <code>b1</code></li> <li>Merge <code>b2</code></li> <li>Commit</li> </ol>"},{"location":"courses/dtle/slides/04_git_advanced/#exercise-3","title":"Exercise 3","text":"<ol> <li>Run <code>git blame</code> on a file with multiple commits</li> <li>Identify who changed each line</li> </ol>"},{"location":"courses/dtle/slides/04_git_advanced/#survival-package-git-advanced","title":"Survival Package (Git Advanced)","text":"<ul> <li><code>git branch</code></li> <li><code>git switch</code></li> <li><code>git merge</code></li> <li>Conflict resolution markers <code>&lt;&lt;&lt;&lt;&lt;&lt;&lt;</code>, <code>=======</code>, <code>&gt;&gt;&gt;&gt;&gt;&gt;&gt;</code></li> <li><code>git stash</code></li> <li><code>git stash pop</code></li> <li><code>git log --oneline --graph</code></li> <li><code>git blame</code></li> </ul>"},{"location":"courses/dtle/slides/04_git_advanced/#wrap-up","title":"Wrap-Up","text":"<ul> <li>Learned branching and merging</li> <li>Practiced conflict resolution</li> <li>Used stash for temporary changes</li> <li>Investigated file history with blame</li> </ul>"},{"location":"courses/dtle/slides/04_git_advanced/#next-session","title":"Next Session","text":"<ul> <li>Start with C++ basics</li> <li>First project with g++, Makefile, and CMake</li> </ul>"},{"location":"courses/dtle/slides/05_cpp_basics/","title":"Unit 5","text":""},{"location":"courses/dtle/slides/05_cpp_basics/#agenda","title":"AGENDA","text":"<ul> <li>Introduction to C++17</li> <li>First program: Hello World</li> <li>Compile with g++</li> <li>Intro to Makefile</li> <li>Intro to CMake</li> <li>Project structure</li> <li>Mini exercises</li> </ul>"},{"location":"courses/dtle/slides/05_cpp_basics/#why-c","title":"Why C++?","text":"<ul> <li>Widely used in embedded, power electronics, and system testing</li> <li>High performance and control</li> <li>Large ecosystem (STL, libraries)</li> <li>Industry standard for engineering projects</li> </ul>"},{"location":"courses/dtle/slides/05_cpp_basics/#hello-world-in-c","title":"Hello World in C++","text":"<pre><code>#include &lt;iostream&gt;\nint main() {\n    std::cout &lt;&lt; \"Hello, world!\" &lt;&lt; std::endl;\n    return 0;\n}\n</code></pre>"},{"location":"courses/dtle/slides/05_cpp_basics/#compile-and-run","title":"Compile and Run","text":"<pre><code>g++ main.cpp -o main\n./main\n</code></pre>"},{"location":"courses/dtle/slides/05_cpp_basics/#makefile-intro","title":"Makefile (Intro)","text":"<ul> <li>Automate compilation   Example <code>Makefile</code>:</li> </ul> <pre><code>all:\n    g++ main.cpp -o main\nclean:\n    rm -f main\n</code></pre> <ul> <li>Run:</li> </ul> <pre><code>make\nmake clean\n</code></pre>"},{"location":"courses/dtle/slides/05_cpp_basics/#cmake-basics","title":"CMake Basics","text":"<ul> <li>Cross-platform build system generator</li> <li>Easier for larger projects</li> </ul> <p>Minimal <code>CMakeLists.txt</code>:</p> <pre><code>cmake_minimum_required(VERSION 3.10)\nproject(HelloWorld)\nadd_executable(main main.cpp)\n</code></pre>"},{"location":"courses/dtle/slides/05_cpp_basics/#building-with-cmake","title":"Building with CMake","text":"<pre><code>mkdir build\ncd build\ncmake ..\nmake\n./main\n</code></pre>"},{"location":"courses/dtle/slides/05_cpp_basics/#project-structure","title":"Project Structure","text":"<pre><code>myproject/\n\u251c\u2500\u2500 src/\n\u2502   \u2514\u2500\u2500 main.cpp\n\u251c\u2500\u2500 inc/\n\u251c\u2500\u2500 CMakeLists.txt\n\u2514\u2500\u2500 build/\n</code></pre>"},{"location":"courses/dtle/slides/05_cpp_basics/#mini-exercises","title":"Mini-Exercises","text":""},{"location":"courses/dtle/slides/05_cpp_basics/#exercise-1","title":"Exercise 1","text":"<ol> <li>Create a new folder <code>cpp_project</code></li> <li>Write <code>main.cpp</code> with Hello World</li> <li>Compile with <code>g++</code> and run</li> </ol>"},{"location":"courses/dtle/slides/05_cpp_basics/#exercise-2","title":"Exercise 2","text":"<ol> <li>Write a Makefile to compile <code>main.cpp</code></li> <li>Use <code>make</code> to build and <code>make clean</code> to remove binaries</li> </ol>"},{"location":"courses/dtle/slides/05_cpp_basics/#exercise-3","title":"Exercise 3","text":"<ol> <li>Create <code>CMakeLists.txt</code> as shown</li> <li>Build with CMake in <code>build/</code></li> <li>Run the program</li> </ol>"},{"location":"courses/dtle/slides/05_cpp_basics/#survival-package-c-project-setup","title":"Survival Package (C++ Project Setup)","text":"<ul> <li><code>g++ main.cpp -o main</code></li> <li>Makefile: <code>make</code>, <code>make clean</code></li> <li>CMake: <code>cmake .. &amp;&amp; make</code></li> <li>Project structure: <code>src/</code>, <code>inc/</code>, <code>build/</code></li> </ul>"},{"location":"courses/dtle/slides/05_cpp_basics/#wrap-up","title":"Wrap-Up","text":"<ul> <li>Wrote and compiled first C++ program</li> <li>Learned Makefile basics</li> <li>Used CMake to build project</li> <li>Understood standard project structure</li> </ul>"},{"location":"courses/dtle/slides/05_cpp_basics/#resources","title":"Resources","text":"<p>Slides</p>"},{"location":"courses/dtle/slides/05_cpp_basics/#next-session","title":"Next Session","text":"<ul> <li>Testing your software with Google Test</li> </ul>"},{"location":"courses/dtle/slides/06_google_test/","title":"Unit 6","text":""},{"location":"courses/dtle/slides/06_google_test/#agenda","title":"AGENDA","text":"<ul> <li>Why testing matters</li> <li>What is Google Test?</li> <li>Introduction to Test Driven Development (TDD)</li> <li>Writing your first test</li> <li>Adding a C++ library and testing it</li> <li>Mini exercises</li> </ul>"},{"location":"courses/dtle/slides/06_google_test/#why-testing","title":"Why Testing?","text":"<ul> <li>Prevent regressions (avoid breaking working code)</li> <li>Validate expected behavior automatically</li> <li>Enable safer refactoring</li> <li>Improve software quality and reliability</li> <li>In professional engineering: no production code without tests</li> </ul>"},{"location":"courses/dtle/slides/06_google_test/#what-is-google-test","title":"What is Google Test?","text":"<ul> <li>C++ testing framework by Google</li> <li>Simple and powerful</li> <li>Integrated into CMake easily</li> <li>Works cross-platform (Linux, Windows, macOS)</li> </ul>"},{"location":"courses/dtle/slides/06_google_test/#test-driven-development-tdd","title":"Test Driven Development (TDD)","text":"<ul> <li>Write a test \u2192 Run it (fails) \u2192 Write code \u2192 Run again (pass) </li> <li>Cycle: Red \u2192 Green \u2192 Refactor</li> <li>Advantages:</li> <li>Ensures clarity about expected behavior</li> <li>Keeps code modular and testable</li> <li>Encourages clean interfaces</li> </ul>"},{"location":"courses/dtle/slides/06_google_test/#example-simple-math-library-14","title":"Example: Simple Math Library (1/4)","text":""},{"location":"courses/dtle/slides/06_google_test/#step-1-cmake-project","title":"Step 1: CMake Project","text":"<p><code>CMakeLists.txt</code></p> <pre><code>cmake_minimum_required(VERSION 3.10)\nproject(mathlib)\n\n# Produce json file for code completion (optional)\nset (CMAKE_EXPORT_COMPILE_COMMANDS 1)\n\n# Enable testing\nenable_testing()\nadd_subdirectory(gtest)\n\n# Library\nadd_library(mathlib src/mathlib.cpp)\ntarget_include_directories(mathlib PUBLIC inc)\n\nadd_executable(runTests tests/test_math.cpp)\ntarget_link_libraries(runTests mathlib gtest_main)\n\nadd_test(NAME runTests COMMAND runTests)\n</code></pre>"},{"location":"courses/dtle/slides/06_google_test/#example-simple-math-library-24","title":"Example: Simple Math Library (2/4)","text":""},{"location":"courses/dtle/slides/06_google_test/#step-2-write-the-test-first-expectation","title":"Step 2: Write the test first (expectation)","text":"<p><code>tests/test_math.cpp</code></p> <pre><code>#include &lt;gtest/gtest.h&gt;\n#include \"mathlib.hpp\"\n\nTEST(MathTest, Addition) {\n    EXPECT_EQ(add(2, 3), 5);\n}\n\nTEST(MathTest, Subtraction) {\n    EXPECT_EQ(subtract(5, 2), 3);\n}\n</code></pre>"},{"location":"courses/dtle/slides/06_google_test/#example-simple-math-library-34","title":"Example: Simple Math Library (3/4)","text":""},{"location":"courses/dtle/slides/06_google_test/#step-3-implement-the-library","title":"Step 3: Implement the Library","text":"<p><code>inc/mathlib.hpp</code></p> <pre><code>#pragma once\n\nint add(int a, int b);\nint subtract(int a, int b);\n</code></pre> <p><code>src/mathlib.cpp</code></p> <pre><code>#include \"mathlib.hpp\"\n\nint add(int a, int b) {\n    return a + b;\n}\n\nint subtract(int a, int b) {\n    return a - b;\n}\n</code></pre>"},{"location":"courses/dtle/slides/06_google_test/#example-simple-math-library-44","title":"Example: Simple Math Library (4/4)","text":""},{"location":"courses/dtle/slides/06_google_test/#step-4-build-run-tests","title":"Step 4: Build &amp; Run Tests","text":"<pre><code>mkdir build &amp;&amp; cd build\ncmake ..\nmake\nctest\n# or\n./runTests\n</code></pre> <p>Expected Output:</p> <pre><code>[==========] Running 2 tests from 1 test suite.\n[----------] Global test environment set-up.\n[ RUN      ] MathTest.Addition\n[       OK ] MathTest.Addition (0 ms)\n[ RUN      ] MathTest.Subtraction\n[       OK ] MathTest.Subtraction (0 ms)\n[==========] 2 tests from 1 test suite ran.\n[  PASSED  ] 2 tests.\n</code></pre>"},{"location":"courses/dtle/slides/06_google_test/#mini-exercise","title":"Mini-Exercise","text":"<ol> <li>Add a new test for a <code>multiply(int, int)</code> function.</li> <li>Run tests (should fail).</li> <li>Implement <code>multiply</code> in <code>mathlib.cpp</code>.</li> <li>Run again until all tests pass.</li> </ol>"},{"location":"courses/dtle/slides/06_google_test/#survival-package-testing","title":"Survival Package (Testing)","text":"<ul> <li>Always test critical code paths</li> <li>Write tests before implementation (TDD mindset)</li> <li>Run tests automatically in CI/CD (later!)</li> <li>Use <code>ctest</code> or <code>./runTests</code> to verify</li> </ul>"},{"location":"courses/dtle/slides/06_google_test/#wrap-up","title":"Wrap-Up","text":"<ul> <li>Understood the purpose of testing</li> <li>Learned basics of Google Test</li> <li>Practiced TDD workflow</li> <li>Built and ran unit tests using CMake</li> </ul>"},{"location":"courses/dtle/slides/06_google_test/#next-session","title":"Next Session","text":"<ul> <li>Classes</li> <li>STL</li> <li>Start with your assignment</li> </ul>"},{"location":"courses/dtle/slides/07_classes/","title":"Unit 8","text":""},{"location":"courses/dtle/slides/07_classes/#agenda","title":"AGENDA","text":"<ul> <li>Why OOP in engineering?</li> <li>Class basics</li> <li>Constructors, methods, attributes</li> <li>const correctness, getters, setters</li> <li>Example: Sensor class</li> <li>Mini exercises</li> </ul>"},{"location":"courses/dtle/slides/07_classes/#why-object-oriented-programming","title":"Why Object-Oriented Programming?","text":"<ul> <li>Organize code around data and behavior</li> <li>Reusable, modular, and testable components</li> <li>Makes simulation and modeling easier</li> <li>Perfect for embedded and power systems (sensors, controllers, devices)</li> </ul>"},{"location":"courses/dtle/slides/07_classes/#class-basics","title":"Class Basics","text":"<p>A class defines data (attributes) and functions (methods).</p> <pre><code>class Sensor {\npublic:\n    void SetValue(double v) { m_Value = v; }\n    double GetValue() const { return m_Value; }\nprivate:\n    double m_Value;\n};\n</code></pre>"},{"location":"courses/dtle/slides/07_classes/#creating-and-using-objects","title":"Creating and Using Objects","text":"<pre><code>int main() {\n    Sensor s;\n    s.SetValue(23.5);\n    cout &lt;&lt; \"Sensor value: \" &lt;&lt; s.GetValue() &lt;&lt; endl;\n}\n</code></pre>"},{"location":"courses/dtle/slides/07_classes/#constructors","title":"Constructors","text":"<ul> <li>Initialize attributes automatically when an object is created.</li> </ul> <pre><code>class Sensor {\npublic:\n    Sensor(const std::string&amp; n, double v = 0.0) : m_Name(n), m_Value(v) {}\n    void SetValue(double v) { m_Value = v; }\n    double GetValue() const { return m_Value; }\n    string GetName() const { return m_Name; }\nprivate:\n    std::string m_Name;\n    double m_Value;\n};\n</code></pre>"},{"location":"courses/dtle/slides/07_classes/#example-sensor-class-in-action","title":"Example: Sensor Class in Action","text":"<p><code>src/main.cpp</code></p> <pre><code>#include &lt;iostream&gt;\n#include &lt;vector&gt;\n#include \"sensor.h\"\nusing namespace std;\n\nint main() {\n    vector&lt;Sensor&gt; sensors = {\n        Sensor(\"Temperature\"),\n        Sensor(\"Voltage\"),\n        Sensor(\"Current\")\n    };\n\n    sensors[0].SetValue(24.3);\n    sensors[1].SetValue(3.3);\n    sensors[2].SetValue(1.2);\n\n    cout &lt;&lt; \"=== Sensor Readings ===\" &lt;&lt; endl;\n    for (const auto&amp; s : sensors)\n        cout &lt;&lt; s.GetName() &lt;&lt; \": \" &lt;&lt; s.GetValue() &lt;&lt; endl;\n}\n</code></pre>"},{"location":"courses/dtle/slides/07_classes/#example-sensor-class-in-action_1","title":"Example: Sensor Class in Action","text":""},{"location":"courses/dtle/slides/07_classes/#sensorhpp","title":"sensor.hpp","text":"<pre><code>#pragma once\n#include &lt;string&gt;\nusing namespace std;\n\nclass Sensor {\npublic:\n    Sensor(string n, double v = 0.0);\n    void SetValue(double v);\n    double GetValue() const;\n    std::string GetName() const;\nprivate:\n    string m_Name;\n    double m_Value;\n};\n</code></pre>"},{"location":"courses/dtle/slides/07_classes/#example-sensor-class-in-action_2","title":"Example: Sensor Class in Action","text":""},{"location":"courses/dtle/slides/07_classes/#sensorcpp","title":"sensor.cpp","text":"<pre><code>#include \"sensor.h\"\n\nSensor::Sensor(string n, double v) : m_Name(n), m_Value(v) {}\n\nvoid Sensor::SetValue(double v) { m_Value = v; }\n\ndouble Sensor::GetValue() const { return m_Value; }\n\nstd::string Sensor::GetName() const { return m_Name; }\n</code></pre>"},{"location":"courses/dtle/slides/07_classes/#example-sensor-class-in-action_3","title":"Example: Sensor Class in Action","text":""},{"location":"courses/dtle/slides/07_classes/#const-correctness","title":"const Correctness","text":"<ul> <li>Mark methods that don't modify data as <code>const</code></li> <li>Example:</li> </ul> <pre><code>double GetValue() const { return m_Value; }\n</code></pre> <ul> <li>Prevents accidental modification of internal state.</li> </ul>"},{"location":"courses/dtle/slides/07_classes/#add-derived-behavior","title":"Add Derived Behavior","text":"<p>Extend class with computed values or conditions.</p> <pre><code>class Sensor {\n    ...\n    bool IsAbove(double threshold) const {\n        return m_Value &gt; threshold;\n    }\n};\n</code></pre>"},{"location":"courses/dtle/slides/07_classes/#example-extension","title":"Example Extension","text":"<pre><code>cout &lt;&lt; \"High Temperature Sensors:\" &lt;&lt; endl;\nfor (const auto&amp; s : sensors) {\n    if (s.IsAbove(20.0))\n        cout &lt;&lt; s.GetName() &lt;&lt; \" = \" &lt;&lt; s.GetValue() &lt;&lt; endl;\n}\n</code></pre>"},{"location":"courses/dtle/slides/07_classes/#survival-package-oop","title":"Survival Package (OOP)","text":"<ul> <li><code>class</code>, <code>private</code>, <code>public</code></li> <li><code>constructor</code>, <code>getter</code>, <code>setter</code></li> <li><code>const</code> for read-only methods</li> <li>Separate interface (<code>.hpp</code>) and implementation (<code>.cpp</code>)</li> <li>Organize with <code>src/</code> and <code>inc/</code></li> </ul>"},{"location":"courses/dtle/slides/07_classes/#wrap-up","title":"Wrap-Up","text":"<ul> <li>Learned fundamentals of classes in C++</li> <li>Built a reusable <code>Sensor</code> class</li> <li>Practiced encapsulation and <code>const</code> correctness</li> </ul>"},{"location":"courses/dtle/slides/08_cpp_stl/","title":"Unit 7","text":""},{"location":"courses/dtle/slides/08_cpp_stl/#agenda","title":"AGENDA","text":"<ul> <li>C++ data types</li> <li>Introduction to the STL</li> <li>std::vector</li> <li>std::map</li> <li>std::set</li> <li>Practical examples and exercises</li> </ul>"},{"location":"courses/dtle/slides/08_cpp_stl/#why-the-stl","title":"Why the STL?","text":"<ul> <li>The Standard Template Library (STL) provides ready-to-use data structures and algorithms.</li> <li>Saves development time, reduces bugs.</li> <li>Highly optimized and well-tested.</li> <li>Used everywhere in professional C++.</li> </ul>"},{"location":"courses/dtle/slides/08_cpp_stl/#basic-data-types","title":"Basic Data Types","text":"<ul> <li>Primitive: <code>int</code>, <code>double</code>, <code>char</code>, <code>bool</code></li> <li>Derived: <code>array</code>, <code>pointer</code>, <code>struct</code>, <code>class</code></li> <li>User-defined: your own types</li> <li>STL containers build on these to store data efficiently</li> </ul>"},{"location":"courses/dtle/slides/08_cpp_stl/#stdvector","title":"std::vector","text":"<ul> <li>Dynamic array that grows automatically</li> <li>Access elements with <code>[]</code> or <code>.at()</code></li> </ul> <pre><code>#include &lt;vector&gt;\n#include &lt;iostream&gt;\nusing namespace std;\n\nint main() {\n    vector&lt;int&gt; values = {1, 2, 3};\n    values.push_back(4);\n\n    for (int v : values)\n        cout &lt;&lt; v &lt;&lt; \" \";\n}\n</code></pre> <p>Output:</p> <pre><code>1 2 3 4\n</code></pre>"},{"location":"courses/dtle/slides/08_cpp_stl/#stdvector-common-operations","title":"std::vector \u2013 Common Operations","text":"<pre><code>v.size();         // number of elements\nv.empty();        // check if empty\nv.clear();        // remove all elements\nv.front();        // first element\nv.back();         // last element\nv.pop_back();     // remove last\n</code></pre>"},{"location":"courses/dtle/slides/08_cpp_stl/#stdmap","title":"std::map","text":"<ul> <li>Associates keys with values, sorted by keys automatically</li> </ul> <pre><code>#include &lt;map&gt;\n#include &lt;iostream&gt;\nusing namespace std;\n\nint main() {\n    map&lt;string, int&gt; scores;\n    scores[\"Anna\"] = 95;\n    scores[\"Bob\"] = 87;\n    scores[\"Clara\"] = 91;\n\n    for (auto&amp; [name, score] : scores)\n        cout &lt;&lt; name &lt;&lt; \": \" &lt;&lt; score &lt;&lt; endl;\n}\n</code></pre> <p>Output:</p> <pre><code>Anna: 95\nBob: 87\nClara: 91\n</code></pre>"},{"location":"courses/dtle/slides/08_cpp_stl/#stdset","title":"std::set","text":"<ul> <li>Stores unique elements only, automatically sorted</li> </ul> <pre><code>#include &lt;set&gt;\n#include &lt;iostream&gt;\nusing namespace std;\n\nint main() {\n    set&lt;int&gt; ids = {5, 3, 1, 3};\n    ids.insert(2);\n    for (int id : ids)\n        cout &lt;&lt; id &lt;&lt; \" \";\n}\n</code></pre> <p>Output:</p> <pre><code>1 2 3 5\n</code></pre>"},{"location":"courses/dtle/slides/08_cpp_stl/#example-word-counter","title":"Example: Word Counter","text":"<p><code>src/main.cpp</code> <pre><code>#include &lt;iostream&gt;\n#include &lt;map&gt;\n#include &lt;string&gt;\n#include &lt;sstream&gt;\nusing namespace std;\n\nint main() {\n    string text = \"this is a test this is only a test\";\n    map&lt;string, int&gt; counter;\n    string word;\n    istringstream iss(text);\n    while (iss &gt;&gt; word)\n        counter[word]++;\n\n    for (auto&amp; [w, c] : counter)\n        cout &lt;&lt; w &lt;&lt; \" -&gt; \" &lt;&lt; c &lt;&lt; endl;\n}\n</code></pre></p>"},{"location":"courses/dtle/slides/08_cpp_stl/#example-word-counter_1","title":"Example: Word Counter","text":""},{"location":"courses/dtle/slides/08_cpp_stl/#expected-output","title":"Expected Output","text":"<pre><code>a -&gt; 2\nis -&gt; 2\nonly -&gt; 1\ntest -&gt; 2\nthis -&gt; 2\n</code></pre>"},{"location":"courses/dtle/slides/08_cpp_stl/#survival-package-stl-containers","title":"Survival Package (STL Containers)","text":"<ul> <li><code>vector</code>: dynamic list of elements</li> <li><code>map</code>: key-value store (sorted)</li> <li><code>set</code>: unique sorted elements</li> <li>Use range-based for loops to iterate</li> <li>Always <code>#include &lt;container&gt;</code></li> </ul>"},{"location":"courses/dtle/slides/08_cpp_stl/#wrap-up","title":"Wrap-Up","text":"<ul> <li>Learned STL basics</li> <li>Practiced vectors, maps, and sets</li> <li>Built a simple word counter</li> </ul>"},{"location":"courses/dtle/slides/09_debugging/","title":"Unit 8","text":""},{"location":"courses/dtle/slides/09_debugging/#agenda","title":"Agenda","text":"<ul> <li>Why debugging matters</li> <li>Build types in CMake</li> <li>Using <code>gdb</code> (GNU Debugger)</li> <li>Example: debugging a simple C++ bug</li> </ul>"},{"location":"courses/dtle/slides/09_debugging/#why-debugging","title":"Why Debugging?","text":"<ul> <li>Every developer writes bugs \u2013 debugging is how we learn.</li> <li>Tools like gdb help find logic or memory errors efficiently.</li> <li>Understanding how to inspect variables and execution flow = essential engineering skill.</li> </ul>"},{"location":"courses/dtle/slides/09_debugging/#cmake-build-types","title":"CMake Build Types","text":"<p>CMake supports different build configurations:</p> <pre><code>cmake -DCMAKE_BUILD_TYPE=Debug ..\ncmake -DCMAKE_BUILD_TYPE=Release ..\n</code></pre> <ul> <li><code>Debug</code>: includes symbols for gdb (<code>-g</code> flag)</li> <li><code>Release</code>: optimized build without debug info</li> </ul>"},{"location":"courses/dtle/slides/09_debugging/#simple-example-program-with-a-bug","title":"Simple Example Program with a Bug","text":"<p><code>src/main.cpp</code></p> <pre><code>#include &lt;iostream&gt;\n#include &lt;vector&gt;\nusing namespace std;\n\nint main() {\n    vector&lt;int&gt; data = {1, 2, 3, 4};\n    for (int i = 0; i &lt;= data.size(); i++) // &lt;-- Bug: &lt;= causes out-of-bounds\n        cout &lt;&lt; data[i] &lt;&lt; endl;\n}\n</code></pre>"},{"location":"courses/dtle/slides/09_debugging/#step-1-compile-with-debug-info","title":"Step 1: Compile with Debug Info","text":"<pre><code>mkdir build &amp;&amp; cd build\ncmake -DCMAKE_BUILD_TYPE=Debug ..\nmake\n</code></pre>"},{"location":"courses/dtle/slides/09_debugging/#step-2-start-gdb","title":"Step 2: Start gdb","text":"<pre><code>gdb ./main\n</code></pre> <p>At the gdb prompt: <pre><code>(gdb) break main\n(gdb) run\n(gdb) next\n(gdb) print i\n(gdb) backtrace\n(gdb) quit\n</code></pre></p>"},{"location":"courses/dtle/slides/09_debugging/#common-gdb-commands","title":"Common gdb Commands","text":"Command Description <code>run</code> start the program <code>break &lt;line/function&gt;</code> set a breakpoint <code>next</code> / <code>step</code> execute next line (step over/into) <code>continue</code> resume program <code>print &lt;var&gt;</code> show variable value <code>backtrace</code> show call stack <code>quit</code> exit gdb"},{"location":"courses/dtle/slides/09_debugging/#example-debugging-session","title":"Example Debugging Session","text":"<p><pre><code>gdb ./main\n(gdb) break 5\n(gdb) run\n(gdb) print i\n(gdb) next\n(gdb) print data[i]\n(gdb) continue\n</code></pre> gdb output:</p> <pre><code>Program received signal SIGSEGV, Segmentation fault.\n</code></pre>"},{"location":"courses/dtle/slides/09_debugging/#debugging-tips","title":"Debugging Tips","text":"<ul> <li>Always compile with <code>-g</code></li> <li>Use small, reproducible test cases</li> <li>Don't just fix symptoms \u2013 understand why the bug occurred</li> <li>Document fixes clearly in Git commits</li> </ul>"},{"location":"courses/dtle/slides/09_debugging/#survival-package-debugging","title":"Survival Package (Debugging)","text":"<ul> <li><code>cmake -DCMAKE_BUILD_TYPE=Debug</code></li> <li><code>gdb ./program</code></li> <li>Commands: <code>break</code>, <code>run</code>, <code>next</code>, <code>step</code>, <code>print</code>, <code>backtrace</code></li> </ul>"},{"location":"courses/dtle/slides/block1_homework/","title":"Homework","text":""},{"location":"courses/dtle/slides/block1_homework/#vscode-homework","title":"VSCode (homework)","text":""},{"location":"courses/dtle/slides/block1_homework/#overview","title":"Overview","text":"<ul> <li>VSCode = full-featured IDE</li> <li>Good for browsing, debugging, extensions</li> <li>Terminal + Neovim = speed</li> <li>VSCode = overview &amp; comfort</li> </ul> <p>\ud83d\udc49 Explore:</p> <ul> <li>IDE</li> <li>File explorer</li> <li>File editing</li> <li>Terminal inside VSCode</li> <li>Extensions</li> <li>C++</li> <li>CMake</li> </ul>"},{"location":"courses/dtle/slides/curriculum/","title":"Curriculum","text":"Col 1 Col 2 Info Text <pre><code>##      ## ######## ##        ######   #######  ##     ## ########\n##  ##  ## ##       ##       ##    ## ##     ## ###   ### ##\n##  ##  ## ##       ##       ##       ##     ## #### #### ##\n##  ##  ## ######   ##       ##       ##     ## ## ### ## ######\n##  ##  ## ##       ##       ##       ##     ## ##     ## ##\n##  ##  ## ##       ##       ##    ## ##     ## ##     ## ##\n ###  ###  ######## ########  ######   #######  ##     ## ########\n</code></pre> <p>Design Tools And Laboratory Engineering - Coding</p> <p>2025</p>"},{"location":"courses/dtle/slides/curriculum/#about-me","title":"About me","text":"<ul> <li>Bernhard Reitinger</li> <li>Coding ist meine Leidenschaft</li> <li>PhD in Computer Science, TU Graz</li> <li>Terminal and neovim guy, love simplicity</li> <li>Tried a lot of programming languages in my career</li> <li>Pascal, Oberon, C/C++, Java/Groovy, C#, Javascript, Shell, Python, Go, Lua, ...</li> </ul>"},{"location":"courses/dtle/slides/curriculum/#block-1-einstieg-toolchain-5-einheiten","title":"Block 1 \u2013 Einstieg &amp; Toolchain (5 Einheiten)","text":""},{"location":"courses/dtle/slides/curriculum/#this-course","title":"This course","text":"<ul> <li>Hands-on - learning by doing</li> <li>Practise versus theory</li> <li>I am the facilitator, you tutor</li> </ul>"},{"location":"courses/dtle/slides/curriculum/#goals","title":"Goals","text":"<ul> <li>Get familiar with the Linux enviroment</li> <li>Learn how to work with the Linux shell</li> <li>Learn how to work with Git</li> <li>Learn how to start your first C++ project</li> <li>CMake</li> <li>Testing</li> <li>Debugging</li> <li>Course C++ (the basics)</li> </ul> <p>After this course, you should be able to start your next C++ project on Linux and develop your ideas using Git.</p>"},{"location":"courses/dtle/slides/curriculum/#einheit-1-einstieg-in-die-umgebung","title":"Einheit 1: Einstieg in die Umgebung","text":"<ul> <li>VirtualBox/VM starten, Login, \u00dcberblick Linux-Desktop/Terminal.</li> <li>Getting familiar with the terminal</li> <li>Erste Shell-Kommandos: ls, cd, pwd, man, mkdir, cp, mv, rm, more, cat, tail.</li> <li>Einf\u00fchrung: Warum Linux, Shell, Terminal wichtig sind f\u00fcr Entwickler.</li> <li>neovim as your default editor</li> <li>Start VSCode and get familiar with the core elements</li> <li>Motivation: \"Warum arbeiten wir wie Profis im Terminal?\"</li> <li>Mini\u00fcbung: Jeder legt ein Verzeichnis an, schreibt eine kleine Textdatei mit echo &gt; file.txt.</li> <li>Mini\u00fcbung: Nutze neovim um dateien zu schreiben und zu modifizieren.</li> <li>Mini\u00fcbung: Lade eine C++ datei herunter und finde die zeile mit einem gewissen text</li> </ul>"},{"location":"courses/dtle/slides/curriculum/#einheit-2-terminal-workflow","title":"Einheit 2: Terminal &amp; Workflow","text":"<ul> <li>Terminal vertiefen: Pipes (|), Redirects (&gt; &gt;&gt; &lt;), grep, find.</li> <li>tmux Basics: Sessions, window, Splits, Detach/Attach (warum n\u00fctzlich).</li> <li>Mini\u00fcbung: in tmux mit 2 Splits arbeiten, eine Datei im vim \u00f6ffnen, gleichzeitig ls -l daneben.</li> <li>Neovim Einf\u00fchrung: install my neovim startup package</li> <li>Hands-on: Studenten tippen im Terminal, \u00f6ffnen Dateien mit vim, bewegen sich sicher.</li> </ul>"},{"location":"courses/dtle/slides/curriculum/#einheit-3-git-basics","title":"Einheit 3: Git Basics","text":"<ul> <li>Motivation: Warum Versionskontrolle (vs. \u201efinal_v2_neu.cpp\u201c).</li> <li>Init, git status, git add, git commit.</li> <li>.gitignore kurz zeigen.</li> <li>Remotes: GitHub/Server einrichten, git remote add origin, git push/pull.</li> <li>Remote erkl\u00e4ren: git clone, git push, git pull.</li> <li>\u00dcbung: eigenes Repo anlegen, Datei erstellen, Commit, Push.</li> <li>Konzept: Warum Versionskontrolle? (Backup, Zusammenarbeit, Nachvollziehbarkeit).</li> <li>Hands-on: Repo lokal erstellen + mit Remote (GitHub/GitLab) verbinden.</li> <li>Bonus: git log, git diff.</li> </ul>"},{"location":"courses/dtle/slides/curriculum/#einheit-4-git-fortgeschrittenpraxis","title":"Einheit 4: Git Fortgeschritten/Praxis","text":"<ul> <li>Branches (git branch, git switch -c, git merge).</li> <li>Konflikte demonstrieren.</li> <li>git stash (praktisch bei Experimenten).</li> <li>\u00dcbung: kleine Partner\u00fcbung: Zwei arbeiten an derselben Datei, Konflikt l\u00f6sen.</li> <li>Kleine \u00dcbung: Jeder macht einen Commit, pushed in ein gemeinsames Repo.</li> </ul>"},{"location":"courses/dtle/slides/curriculum/#einheit-5-erstes-c-projekt","title":"Einheit 5: Erstes C++ Projekt","text":"<ul> <li>Einstieg C++17: (was ist C++, kurze theorie)</li> <li>minimaler main.cpp (\u201eHello, world!\u201c).</li> <li>Compiler Basics: g++ main.cpp -o main.</li> <li>Makefile introduction</li> <li>Einf\u00fchrung CMake: minimal CMakeLists.txt.</li> <li>cmake .. &amp;&amp; make.</li> <li>Struktur eines Projekts: src/, inc/, build/.</li> <li>\u00dcbung: Projekt-Ordner anlegen, CMake + main.cpp, build &amp; run.</li> <li>Warum CMake? \u2192 Portabilit\u00e4t, Buildsystem.</li> <li>Programm kompilieren &amp; ausf\u00fchren: ./main.</li> <li>Erste \u201cHello World\u201d-Variante.</li> <li>Studenten bauen ihr erstes Projekt selbst.</li> </ul> <p>Block 2 \u2013 C++ Grundlagen &amp; Debugging (5 Einheiten)</p> <p>Einheit 8: Classes \u2022 Unterschied funktionales und oop \u2022 Klassen, Structs, methoden, properties, getter, setter \u2022 consts \u2022 \u00dcbung: Klasse Complex implementieren (Addition, Ausgabe).</p> <p>Einheit 6: Datentypen &amp; STL \u2013 Teil 1 \u2022 Primitive Typen: int, double, bool, char. \u2022 std::string, std::vector. \u2022 Input/Output mit cin/cout. \u2022 \u00dcbung: Programm, das Zahlen einliest und summiert.</p> <p>Einheit 7: Datentypen &amp; STL \u2013 Teil 2 \u2022 std::map, std::set, std::unordered_map. \u2022 Iterieren mit range-based for. \u2022 \u00dcbung: kleines W\u00f6rterbuch bauen (map). <p>Einheit 9: Testing &amp; Debugging \u2022 Integrate google test \u2022 Write your first test \u2022 TDD \u2022 Debug build (-g, cmake -DCMAKE_BUILD_TYPE=Debug). \u2022 gdb Basics: start, breakpoints, step, next, print. \u2022 lldb kurz erw\u00e4hnen. \u2022 Integration mit tmux/vim (z. B. termdebug Plugin). \u2022 \u00dcbung: Bug einbauen, mit Debugger finden (z. B. Array out-of-bounds).</p> <p>Einheit 10: Abschlussprojekt &amp; Wrap-Up \u2022 Alles zusammenf\u00fchren: \u2022 Git-Repo \u2192 CMake Projekt \u2192 mehrere Dateien \u2192 Debugger. \u2022 Kleine Gruppenarbeit: Mini-Projekt (z. B. Taschenrechner, Text-Analyser, Simulation). \u2022 Am Ende: Code committen &amp; pushen.</p>"},{"location":"courses/dtle/slides/curriculum/#resources","title":"Resources","text":"<ul> <li>Linux Command-line for Beginners</li> <li>Linux Command-line: Full Course</li> </ul>"},{"location":"courses/dtle/slides/curriculum/#tables","title":"Tables","text":"<pre><code>plantuml -tutxt -pipe &lt; x\n</code></pre>"},{"location":"courses/sda/","title":"Software Design and Architecture","text":"<p>FH Joanneum Course WS 2025/26</p>"},{"location":"courses/sda/#resources","title":"Resources","text":"<ul> <li>Linux Platform (Egon Teiniker) Github</li> <li>Introduction to Configuration Management (Egon Teiniker) Github</li> </ul>"},{"location":"exams/","title":"Exams","text":"<p>All exams are behind a protected area.</p> <ul> <li>DTLE</li> </ul>"},{"location":"exams/dtle-exam/","title":"Eingangstest (Beispiel)","text":"<p>Hinweis: Diese Seite ist verschl\u00fcsselt. Passwort-Level: <code>secret</code>.</p> <ol> <li>MC: Welcher Befehl listet Dateien?</li> <li>SA: Was macht <code>cd ..</code>?</li> </ol>"}]}